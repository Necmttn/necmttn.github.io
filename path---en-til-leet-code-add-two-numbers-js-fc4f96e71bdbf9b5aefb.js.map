{"version":3,"sources":["webpack:///path---en-til-leet-code-add-two-numbers-js-fc4f96e71bdbf9b5aefb.js","webpack:///./.cache/json/en-til-leet-code-add-two-numbers-js.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/en-til-leet-code-add-two-numbers-js.json","module","exports","data","markdownRemark","fileAbsolutePath","html","excerpt","frontmatter","title","til","pathContext","path","langKey"],"mappings":"AAAAA,cAAc,gBAERC,6FACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,iBAAA,8HAAAC,KAAA,k5LAAgtMC,QAAA,yIAA8GC,aAAoJC,MAAA,kCAAAC,KAAA,KAAuDC,aAAgBC,KAAA,wCAAAC,QAAA","file":"path---en-til-leet-code-add-two-numbers-js-fc4f96e71bdbf9b5aefb.js","sourcesContent":["webpackJsonp([7267368044645],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/en-til-leet-code-add-two-numbers-js.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"fileAbsolutePath\":\"/home/travis/build/Necmttn/necmttn.github.io/packages/necmttn-gatsby/src/pages/til/leet-code-add-two-numbers-js/index.en.md\",\"html\":\"<p>tl;dr\\nhere’s the solution.</p>\\n<html><head></head><body><div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  total <span class=\\\"token operator\\\">=</span> total <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">**</span> level<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> \\n  <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> total <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> addTwoNumbers <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>l1<span class=\\\"token punctuation\\\">,</span> l2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>l1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>l2<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;&apos;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div></body></html>\\n<p><em>My mistake was</em> </p>\\n<blockquote>\\n<p>In the first round of the recursive fuction you need to return otherwise it will return undefined.\\ni was doing like .</p>\\n</blockquote>\\n<html><head></head><body><div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  total <span class=\\\"token operator\\\">=</span> total <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">**</span> level<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> \\n  <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> total <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div></body></html>\\n<p><em>WRONG</em> Don’t be like me :) </p>\",\"excerpt\":\"tl;dr \\nhere’s the solution. My mistake was   In the first round of the recursive fuction you need to return otherwise it will return…\",\"frontmatter\":{\"title\":\"LeetCode - Add Two Numbers - JS\",\"til\":true}}},\"pathContext\":{\"path\":\"/en/til/leet-code-add-two-numbers-js/\",\"langKey\":\"en\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---en-til-leet-code-add-two-numbers-js-fc4f96e71bdbf9b5aefb.js","module.exports = {\"data\":{\"markdownRemark\":{\"fileAbsolutePath\":\"/home/travis/build/Necmttn/necmttn.github.io/packages/necmttn-gatsby/src/pages/til/leet-code-add-two-numbers-js/index.en.md\",\"html\":\"<p>tl;dr\\nhere’s the solution.</p>\\n<html><head></head><body><div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  total <span class=\\\"token operator\\\">=</span> total <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">**</span> level<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> \\n  <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> total <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> addTwoNumbers <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>l1<span class=\\\"token punctuation\\\">,</span> l2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>l1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>l2<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;&apos;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div></body></html>\\n<p><em>My mistake was</em> </p>\\n<blockquote>\\n<p>In the first round of the recursive fuction you need to return otherwise it will return undefined.\\ni was doing like .</p>\\n</blockquote>\\n<html><head></head><body><div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  total <span class=\\\"token operator\\\">=</span> total <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">**</span> level<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> \\n  <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> total <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div></body></html>\\n<p><em>WRONG</em> Don’t be like me :) </p>\",\"excerpt\":\"tl;dr \\nhere’s the solution. My mistake was   In the first round of the recursive fuction you need to return otherwise it will return…\",\"frontmatter\":{\"title\":\"LeetCode - Add Two Numbers - JS\",\"til\":true}}},\"pathContext\":{\"path\":\"/en/til/leet-code-add-two-numbers-js/\",\"langKey\":\"en\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/en-til-leet-code-add-two-numbers-js.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/en-til-leet-code-add-two-numbers-js.json\n// module chunks = 7267368044645"],"sourceRoot":""}