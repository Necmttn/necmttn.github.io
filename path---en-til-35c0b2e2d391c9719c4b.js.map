{"version":3,"sources":["webpack:///path---en-til-35c0b2e2d391c9719c4b.js","webpack:///./.cache/json/en-til.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/en-til.json","module","exports","data","allMarkdownRemark","edges","node","id","html","fields","langKey","slug","frontmatter","title","til","excerpt","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,gEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,mBAAqBC,QAAUC,MAAQC,GAAA,mKAAAC,KAAA,8nFAA6pEC,QAA8wBC,QAAA,KAAAC,KAAA,2CAAgEC,aAAgBC,MAAA,iCAAAC,KAAA,GAAoDC,QAAA,uEAAkFT,MAAQC,GAAA,iKAAAC,KAAA,k5LAAquMC,QAA0GC,QAAA,KAAAC,KAAA,yCAA8DC,aAAgBC,MAAA,kCAAAC,KAAA,GAAqDC,QAAA,4IAAuJT,MAAQC,GAAA,kKAAAC,KAAA,+VAAgcC,QAAuFC,QAAA,KAAAC,KAAA,0CAA+DC,aAAgBC,MAAA,iCAAAC,KAAA,GAAoDC,QAAA,kJAA4JC,aAAgBL,KAAA,WAAAD,QAAA","file":"path---en-til-35c0b2e2d391c9719c4b.js","sourcesContent":["webpackJsonp([170226635580224],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/en-til.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"id\":\"/home/travis/build/Necmttn/necmttn.github.io/packages/necmttn-gatsby/src/pages/til/how-to-loop-over-map-in-golang/index.en.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>you can use builtn took range for it. Check the example;</p>\\n<html><head></head><body><div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-go\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t<span class=\\\"token string\\\">&quot;fmt&quot;</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">func</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tkar <span class=\\\"token operator\\\">:=</span> <span class=\\\"token function\\\">make</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">map</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\tkar<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">&quot;puz&quot;</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">66</span>\\n\\tkar<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">&quot;pol&quot;</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">99</span>\\n\\n\\t<span class=\\\"token keyword\\\">for</span> i<span class=\\\"token punctuation\\\">,</span> v <span class=\\\"token operator\\\">:=</span> <span class=\\\"token keyword\\\">range</span> kar <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tfmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;key %d = value%d\\\\n&quot;</span><span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> v<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div></body></html>\\n<p>will log</p>\\n<html><head></head><body><div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>key %<span class=\\\"token operator\\\">!</span>d<span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token operator\\\">=</span>puz<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span> value 66\\nkey %<span class=\\\"token operator\\\">!</span>d<span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token operator\\\">=</span>pol<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span> value 99\\n\\n<span class=\\\"token punctuation\\\">[</span>Process exited 0<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div></body></html>\",\"fields\":{\"langKey\":\"en\",\"slug\":\"/en/til/how-to-loop-over-map-in-golang/\"},\"frontmatter\":{\"title\":\"How to loop over map in GoLang\",\"til\":true},\"excerpt\":\"you can use builtn took range for it. Check the example; will log\"}},{\"node\":{\"id\":\"/home/travis/build/Necmttn/necmttn.github.io/packages/necmttn-gatsby/src/pages/til/leet-code-add-two-numbers-js/index.en.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>tl;dr\\nhereâ€™s the solution.</p>\\n<html><head></head><body><div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  total <span class=\\\"token operator\\\">=</span> total <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">**</span> level<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> \\n  <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> total <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> addTwoNumbers <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>l1<span class=\\\"token punctuation\\\">,</span> l2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>l1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>l2<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;&apos;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div></body></html>\\n<p><em>My mistake was</em> </p>\\n<blockquote>\\n<p>In the first round of the recursive fuction you need to return otherwise it will return undefined.\\ni was doing like .</p>\\n</blockquote>\\n<html><head></head><body><div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  total <span class=\\\"token operator\\\">=</span> total <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">**</span> level<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> \\n  <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> total <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div></body></html>\\n<p><em>WRONG</em> Donâ€™t be like me :) </p>\",\"fields\":{\"langKey\":\"en\",\"slug\":\"/en/til/leet-code-add-two-numbers-js/\"},\"frontmatter\":{\"title\":\"LeetCode - Add Two Numbers - JS\",\"til\":true},\"excerpt\":\"tl;dr \\nhereâ€™s the solution. My mistake was   In the first round of the recursive fuction you need to return otherwise it will returnâ€¦\"}},{\"node\":{\"id\":\"/home/travis/build/Necmttn/necmttn.github.io/packages/necmttn-gatsby/src/pages/til/social-media-post-image-sizes/index.en.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Facebook - Shared image size;</strong></p>\\n<blockquote>\\n<p>1200px x 630px</p>\\n</blockquote>\\n<p><strong>Twitter - Shared image size;</strong></p>\\n<blockquote>\\n<p>Minimum 440px x 220px (2:1 Ratio)</p>\\n</blockquote>\\n<p><strong>Instagram - Shared image size;</strong></p>\\n<blockquote>\\n<p>Minimum 1080px x 1080px </p>\\n</blockquote>\",\"fields\":{\"langKey\":\"en\",\"slug\":\"/en/til/social-media-post-image-sizes/\"},\"frontmatter\":{\"title\":\"Social Media post image sizes.\",\"til\":true},\"excerpt\":\"Facebook - Shared image size; 1200px x 630px Twitter - Shared image size; Minimum 440px x 220px (2:1 Ratio) Instagram - Shared image sizeâ€¦\"}}]}},\"pathContext\":{\"slug\":\"/en/til/\",\"langKey\":\"en\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---en-til-35c0b2e2d391c9719c4b.js","module.exports = {\"data\":{\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"id\":\"/home/travis/build/Necmttn/necmttn.github.io/packages/necmttn-gatsby/src/pages/til/how-to-loop-over-map-in-golang/index.en.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>you can use builtn took range for it. Check the example;</p>\\n<html><head></head><body><div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-go\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">(</span>\\n\\t<span class=\\\"token string\\\">&quot;fmt&quot;</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">func</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tkar <span class=\\\"token operator\\\">:=</span> <span class=\\\"token function\\\">make</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">map</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token builtin\\\">int</span><span class=\\\"token punctuation\\\">)</span>\\n\\n\\tkar<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">&quot;puz&quot;</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">66</span>\\n\\tkar<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">&quot;pol&quot;</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">99</span>\\n\\n\\t<span class=\\\"token keyword\\\">for</span> i<span class=\\\"token punctuation\\\">,</span> v <span class=\\\"token operator\\\">:=</span> <span class=\\\"token keyword\\\">range</span> kar <span class=\\\"token punctuation\\\">{</span>\\n\\t\\tfmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Printf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;key %d = value%d\\\\n&quot;</span><span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> v<span class=\\\"token punctuation\\\">)</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div></body></html>\\n<p>will log</p>\\n<html><head></head><body><div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code>key %<span class=\\\"token operator\\\">!</span>d<span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token operator\\\">=</span>puz<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span> value 66\\nkey %<span class=\\\"token operator\\\">!</span>d<span class=\\\"token punctuation\\\">(</span>string<span class=\\\"token operator\\\">=</span>pol<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|</span> value 99\\n\\n<span class=\\\"token punctuation\\\">[</span>Process exited 0<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div></body></html>\",\"fields\":{\"langKey\":\"en\",\"slug\":\"/en/til/how-to-loop-over-map-in-golang/\"},\"frontmatter\":{\"title\":\"How to loop over map in GoLang\",\"til\":true},\"excerpt\":\"you can use builtn took range for it. Check the example; will log\"}},{\"node\":{\"id\":\"/home/travis/build/Necmttn/necmttn.github.io/packages/necmttn-gatsby/src/pages/til/leet-code-add-two-numbers-js/index.en.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>tl;dr\\nhereâ€™s the solution.</p>\\n<html><head></head><body><div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  total <span class=\\\"token operator\\\">=</span> total <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">**</span> level<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> \\n  <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> total <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> addTwoNumbers <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>l1<span class=\\\"token punctuation\\\">,</span> l2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>l1<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>l2<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&apos;&apos;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div></body></html>\\n<p><em>My mistake was</em> </p>\\n<blockquote>\\n<p>In the first round of the recursive fuction you need to return otherwise it will return undefined.\\ni was doing like .</p>\\n</blockquote>\\n<html><head></head><body><div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  total <span class=\\\"token operator\\\">=</span> total <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>val <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span> <span class=\\\"token operator\\\">**</span> level<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">,</span> level<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> total<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> \\n  <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> total <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div></body></html>\\n<p><em>WRONG</em> Donâ€™t be like me :) </p>\",\"fields\":{\"langKey\":\"en\",\"slug\":\"/en/til/leet-code-add-two-numbers-js/\"},\"frontmatter\":{\"title\":\"LeetCode - Add Two Numbers - JS\",\"til\":true},\"excerpt\":\"tl;dr \\nhereâ€™s the solution. My mistake was   In the first round of the recursive fuction you need to return otherwise it will returnâ€¦\"}},{\"node\":{\"id\":\"/home/travis/build/Necmttn/necmttn.github.io/packages/necmttn-gatsby/src/pages/til/social-media-post-image-sizes/index.en.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Facebook - Shared image size;</strong></p>\\n<blockquote>\\n<p>1200px x 630px</p>\\n</blockquote>\\n<p><strong>Twitter - Shared image size;</strong></p>\\n<blockquote>\\n<p>Minimum 440px x 220px (2:1 Ratio)</p>\\n</blockquote>\\n<p><strong>Instagram - Shared image size;</strong></p>\\n<blockquote>\\n<p>Minimum 1080px x 1080px </p>\\n</blockquote>\",\"fields\":{\"langKey\":\"en\",\"slug\":\"/en/til/social-media-post-image-sizes/\"},\"frontmatter\":{\"title\":\"Social Media post image sizes.\",\"til\":true},\"excerpt\":\"Facebook - Shared image size; 1200px x 630px Twitter - Shared image size; Minimum 440px x 220px (2:1 Ratio) Instagram - Shared image sizeâ€¦\"}}]}},\"pathContext\":{\"slug\":\"/en/til/\",\"langKey\":\"en\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/en-til.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/en-til.json\n// module chunks = 170226635580224"],"sourceRoot":""}